
data segment
    ;mainmenu            
    
;Biến thông báo
    main1 db "Extended snake.asm"
    main2 db "In this game you must eat 5 fruit on the screen!"
    main4 db "Move the snake by pressing the keys w,a,s,d"
    main5 db "w:move up"
    main6 db "s:move down"
    main7 db "d:move right"
    main8 db "a:move left"
    about1 db "This game is extended by: snake.asm team,"
    about2 db "For Computer Architecture PTIT course"
    main9 db "The snake head is the '+' in the middle of the screen"
    main10 db "Press any key to start..."
    ;bild
    hlths db "Lives:",3,3,3,3,3
    ;ingame        
    
;Thuộc tính game
    letadd dw 1700, 2000,2500,1800,3764,1612,6 Dup(0) ;hiển thị địa chỉ của các dấu sao có thể thu thập, điều này đang được hiển thị và cập nhật trong quá trình chơi trò chơi
    dletadd dw 1700, 2000,2500,1800,3764,1612,6 Dup(0) ; giá trị mặc định cho các địa chỉ dấu sao có thể thu thập được trên màn hình để trả lại chúng sau khi đặt lại trò chơi
    letnum db 6 ; số lượng sao có thể thu thập
    fin db 6 ; để theo dõi số lượng các kí tự có thể thu thập được
    hlth db 10 ;/2 ; mạng trong trò chơi là 5 
    
    ;Snake Info           
    sadd dw 07D2h,7 Dup(0) ;địa chỉ của kí tự đầu tiên trên màn hình và điều này sẽ được cập nhật trong quá trình chơi trò chơi và sẽ thêm địa chỉ của từng kí tự đó sau khi thu thập
    snake db '+',7 Dup(0) ; mảng kí tụ đã thu thập 
    snakel db 1 ; đếm số lượng kí tự thu thập được
    
    ;end 
    gmwin db "You Win"
    gmov db "Game Over"
    endtxt db "Press esc to exit"
    
ends

stack segment
    dw   128  dup(0)
ends

code segment
start:
    mov ah,1 
    int 21h
    mov ax, data
    mov ds, ax
    
    mov ax,0b800h
    mov es, ax 
    
    cld ; xoá lệnh cờ 
    
    ; ẩn con trỏ văn bản 
    mov ah,1
    mov ch,2bh
    mov cl,0bh
    int 10h  
    
    call main_menu
    
    startag:
    
    call bild ; tạo kí tự và vẽ đường viền
    
    xor cl,cl 
    xor dl,dl ; xóa các giá trị cũ trước đó để không tự động nhận đầu vào 
    read: ; đọc đầu vào từ bàn phím 
    mov ah,1
    int 16H
    jz s1
    mov ah,0
    int 16H
    and al,0dfh 
    mov dl,al
    jmp s1
    
    s1: ; kiểm tra xem nút esc có được nhấn không 
    cmp dl,1bh
    je ext
    ;cài đặt hướng di chuyển
    left:
    cmp dl,'A'
    jne right
    call ml
    mov cl,dl
    jmp read
    
    right:
    cmp dl,'D'
    jne up
    call mr
    mov cl,dl
    jmp read
    
    up:
    cmp dl,'W'
    jne down
    call mu 
    mov cl,dl
    jmp read
    
    down:
    cmp dl,'S'
    jne read1
    call md
    mov cl,dl
    jmp read
    
    read1:
    mov dl,cl
    jmp read
    
    ; thoát sang hđh
    ext:
    xor cx,cx
    mov dh,24
    mov dl,79
    mov bh,7
    mov ax,700h
    int 10h
    mov ax, 4c00h 
    int 21h    
ends 

;main menu
main_menu proc
    call border
    
	;in phần giới thiệu và hướng dẫn
    mov di,380
    lea si,main1
    mov cx,18
    lopem1:
    movsb 
    inc di
    loop lopem1
    
    mov di,33Eh
    lea si,main2
    mov cx,48
    lopem2:
    movsb 
    inc di
    loop lopem2
    
    mov di,47Eh
    lea si,main4
    mov cx,43
    lopem4:
    movsb 
    inc di
    loop lopem4
    
    mov di,5dch
    lea si,main5
    mov cx,9
    lopem5:
    movsb 
    inc di
    loop lopem5
    
    mov di,67ch
    lea si,main6
    mov cx,11
    lopem6:
    movsb 
    inc di
    loop lopem6
    
    mov di,71ch
    lea si,main7
    mov cx,12
    lopem7:
    movsb 
    inc di
    loop lopem7
    
    mov di,7bch
    lea si,main8
    mov cx,11
    lopem8:
    movsb 
    inc di
    loop lopem8
    
    mov di,8DEh
    lea si,about1
    mov cx,41
    lopea1:
    movsb 
    inc di
    loop lopea1
    
    mov di,97Eh
    lea si,about2
    mov cx,37
    lopea2:
    movsb 
    inc di
    loop lopea2
    
    mov di,0ABEh
    lea si,main9
    mov cx,53
    lopem9:
    movsb 
    inc di
    loop lopem9
    
    mov di,0b5Eh
    lea si,main10
    mov cx,25
    lopem10:
    movsb 
    inc di
    loop lopem10
    
    
       
    mov ah,7
    int 21h
    
    call clearall
    
    
ret
endp    
;Game screen 
bild proc ; để đặt các đường viền và đặt các kí tự trên màn hình
    ;start point
    call border 
    
    lea si,hlths
    mov di,0
    mov cx,11
    loph:
    movsb 
    inc di
    loop loph
    
    lea si,main1
    mov di,122
    mov cx,18
    loph1:
    movsb 
    inc di
    loop loph1   
    
    xor dx,dx
    mov di,sadd
    mov dl,snake 
    es: mov [di],dl  
           
;fruit placement
    es: mov [1700],'*'   
    es: mov [2000],'*'
    es: mov [2500],'*'
    es: mov [1800],'*'  
    es: mov [3764],'*' 
    es: mov [1612],'*' 
    ret
endp  

;phần cài đặt hướng di chuyển của rắn
;left:
ml proc ; hàm rắn di chuyển sang trái 
    push dx 
    call shift_addrs
    sub sadd,2
    
    call eat
    
    call move_snake
    pop dx
ret    
endp
;right:
mr proc ;hàm rắn di chuyển sang phải
    push dx 
    call shift_addrs
    add sadd,2
    
    call eat 
    
    call move_snake 
    
    pop dx
    
ret    
endp
;up:
mu proc ;hàm rắn đi lên 
    push dx 
    call shift_addrs
    sub sadd,160
    
    call eat
    
    call move_snake
    pop dx
ret    
endp
;down:
md proc ;hàm rắn đi xuống
    push dx 
    call shift_addrs
    add sadd,160
    
    call eat
    
    call move_snake
    pop dx
ret    
endp

shift_addrs proc
    push ax
    xor ch,ch
    xor bh,bh
    mov cl,snakel
    inc cl
    mov al,2
    mul cl
    mov bl,al
    
    xor dx,dx
    
    shiftsnake:
    mov dx,sadd[bx-2]
    mov sadd[bx],dx
    sub bx,2
    loop shiftsnake:
pop ax
ret
endp

eat proc ; kiểm tra rắn có trúng kí tự hay không, nếu có thêm kí tự đó vào con rắn 
    push ax 
    push cx 
    
    mov di,sadd 
    es: cmp [di],0 
    jz no
    es: cmp [di],20h
    jz wall 
    xor ch,ch
    mov cl,letnum 
    xor si,si
    lop:
    cmp di,letadd[si]
    jz addf
    add si,2
    loop lop
    jmp wall
    addf:
    mov letadd[si],0 
    xor bh,bh
    mov bl,snakel
    es: mov dl,[di]
    mov snake[bx],dl
    es: mov [di],0
    add snakel,1 
    sub fin,1
    cmp fin,0
    jz chkletters
    jmp no
    wall:   ;gặp tường
    cmp di,320
    jbe wallk
    cmp di,3840
    jae wallk
    mov ax,di
    mov bl,160
    div bl
    cmp ah,0
    jz wallk
    mov ax,di
    add ax,2
    mov bl,160
    div bl
    cmp ah,0
    jz wallk
    jmp no
    wallk:	;trừ 1 mạng
    xor bh,bh
    mov bl,hlth   

    es: mov [bx+11],0
    mov hlths[bx+3],0
    sub hlth,2
    cmp hlth,0
    jnz rest	
    pop cx
    pop ax
    call game_over ;hết mạng thì nhảy game over
    rest: 
    pop cx
    pop ax
    call restart ;còn mạng thì nhảy restart
     
    no:
    pop cx
    pop ax
ret
endp 
;dịch chuyển rắn
move_snake proc
    xor ch,ch
    xor si,si
    xor dl,dl
    mov cl,snakel
    xor bx,bx
    l1mr:
    mov di,sadd[si]
    mov dl,snake[bx]
    es: mov [di],dl
    add si,2
    inc bx
    loop l1mr
    mov di,sadd[si] 
    es:mov [di],0
ret
endp

border proc ; hàm xây dựng đường viền 
    mov ah,0
    mov al,3
    int 10h
    
    mov ah,6
    mov al,0 
    mov bh,0ffh 
    
    mov ch,1
    mov cl,0
    mov dh,1
    mov dl,80
    int 10h
  
    mov ch,3
    mov cl,0
    mov dh,24
    mov dl,0
    int 10h
   
    mov ch,24
    mov cl,0
    mov dh,24
    mov dl,79
    int 10h
    
    mov ch,1
    mov cl,79
    mov dh,24
    mov dl,79
    int 10h

ret
endp
;trừ 1 tim và bắt đầu lại trò chơi
restart proc
    xor ch,ch  
    xor si,si
    mov cl,snakel
    inc cl
    delt: 
    mov di,sadd[si]
    es:mov [di],0
    add si,2
    loop delt
       
    mov fin,6

	
    mov sadd,07D2h
    mov cl,snakel
    inc cl
    xor si,si
    inc si
    xor di,di
    add di,2
    emptsn:
    mov snake[si],0
    mov sadd[di],0
    add di,2
    inc si
    loop emptsn
    mov snakel,1
    
    xor ch,ch
    mov cl,letnum
    xor si,si
    reslet:
    mov bx,dletadd[si]
    mov letadd[si],bx
    add si,2
    add bx,2
    loop reslet      
    xor si,si
    mov snake[si],'+'

    jmp startag

endp
;dịch rắn và kiểm tra điều kiện thắng
chkletters proc
    call move_snake 
    
    call win
    
    xor bh,bh
    mov bl,hlth   

    es: mov [bx+11],0
    mov hlths[bx+3],0
    sub hlth,2
    cmp hlth,0
    jnz restc
    call game_over 
    restc: 
    call restart
    endp
;in thông báo thắng và dừng game
win proc 
    call clearall
    call border
     
    mov di,7cah
    lea si,gmwin
    mov cx,7
    lope1w:
    movsb 
    inc di
    loop lope1w
    
    mov di,862h
    lea si,endtxt
    mov cx,17
    lope2:
    movsb 
    inc di
    loop lope2
    
    qwer1:         
    mov ah,7
    int 21h
    cmp al,1bh         
    jz ext
    jmp qwer1
    
    ret
    endp
;in thông báo thua và kết thúc
game_over proc
    call clearall
    call border
    
    mov di,7c8h
    lea si,gmov
    mov cx,9
    lope1:
    movsb 
    inc di
    loop lope1
    
    mov di,862h
    lea si,endtxt
    mov cx,17
    lope2w:
    movsb 
    inc di
    loop lope2w 
    
    qwer:         
    mov ah,7
    int 21h
    cmp al,1bh         
    jz ext
    jmp qwer
    
endp
;xoá hết tất cả trên màn hình
clearall proc
    
    xor cx,cx
    mov dh,24
    mov dl,79
    mov bh,7
    mov ax,700h
    int 10h 
    
ret
endp    

    
end start ; thiết lập lại điểm và dừng chương trình 